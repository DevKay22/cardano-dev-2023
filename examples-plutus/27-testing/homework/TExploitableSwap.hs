{-# LANGUAGE DataKinds          #-}
{-# LANGUAGE FlexibleInstances  #-}
{-# LANGUAGE NoImplicitPrelude  #-}
{-# LANGUAGE NumericUnderscores #-}
{-# LANGUAGE OverloadedStrings  #-}

module Main where

import           Plutus.Model      (Run,
                                    adaValue, defaultBabbage, mustFail,
                                    testNoErrors, FakeCoin (FakeCoin),
                                    fakeValue, TypedValidator)
import           PlutusTx.Prelude  (($))
import           Prelude           (IO, (.), (<>), undefined)
import qualified ExploitableSwap   as OnChain
import           Test.Tasty        (defaultMain, testGroup)
import           Plutus.Model.V1   (mkTypedValidator)

---------------------------------------------------------------------------------------------------
------------------------------------------ TESTING ------------------------------------------------

main :: IO ()
main = do
  defaultMain $ do
    testGroup
      "Catch double spend with testing"
      [ good "Normal spending" normalSpending
      , bad  "Double spending" doubleSpending
      ]
 where
    bad msg = good msg . mustFail
    good = testNoErrors (adaValue 10_000_000 <> fakeValue scToken 100) defaultBabbage

---------------------------------------------------------------------------------------------------
----------------------------- HELPER FUNCTIONS/INSTANCES/TYPES ------------------------------------

scToken :: FakeCoin
scToken = FakeCoin "Super-Cool-Token"
 
type HomeworkScript = TypedValidator OnChain.DatumSwap ()

swapScript :: HomeworkScript
swapScript = mkTypedValidator OnChain.validator

lockingTx :: undefined
lockingTx = undefined

consumingTx :: undefined
consumingTx = undefined

doubleConsumingTx :: undefined
doubleConsumingTx = undefined

---------------------------------------------------------------------------------------------------
-------------------------------------- TESTING SPENDING -------------------------------------------

normalSpending :: Run ()
normalSpending = undefined


doubleSpending :: Run ()
doubleSpending = undefined